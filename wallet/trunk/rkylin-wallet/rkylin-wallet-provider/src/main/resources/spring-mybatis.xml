<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd ">
	



	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
        <!-- 配置logback 日志的filter -->
		<property name="proxyFilters"> 
		  <list> 
		      <ref bean="log-filter" />
		      <ref bean="stat-filter" /> 
		  </list>  
		 </property> 
		 <!-- 合并多个DruidDataSource的监控数据 -->
		<property name="useGlobalDataSourceStat" value="true" />       
	</bean>
	
	<!-- 日志中打印sql配置 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
	    <property name="resultSetLogEnabled" value="${druid.log.filter.resultSetLogEnabled}" />
	    <!-- 所有的statement的语句 -->
	    <property name="statementLogEnabled" value="true" />
        <property name="statementCreateAfterLogEnabled" value="false" />
        <property name="statementPrepareAfterLogEnabled" value="false" />
        <property name="statementPrepareCallAfterLogEnabled" value="false" />
        <!-- statement执行后的语句配置 -->
        <property name="statementExecuteAfterLogEnabled" value="true" />
        <property name="statementExecuteQueryAfterLogEnabled" value="true" />
        <property name="statementExecuteUpdateAfterLogEnabled" value="true" />
        <property name="statementExecuteBatchAfterLogEnabled" value="true" />      
        <!-- 可执行的sql语句 -->
        <property name="statementExecutableSqlLogEnable" value="${druid.log.filter.statementExecutableSqlLogEnable}" />
        <property name="statementCloseAfterLogEnabled" value="false" />
        <property name="statementParameterClearLogEnable" value="false" />
        <property name="statementParameterSetLogEnabled" value="false" />	    
	</bean>

	<!-- sql日志 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
	    <property name="slowSqlMillis" value="${druid.stat.filter.slowSqlMillis}" />
	    <property name="logSlowSql" value="${druid.stat.filter.logSlowSql}" />
	    <property name="mergeSql" value="${druid.stat.filter.mergeSql}" />
	</bean>	
	
	<!-- myBatis工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapper下所有的配置文件，开发时不建议这样配 -->
		<!-- <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"
			/> -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>


	<!-- myibats操作数据库的类 ，用接口编程不需要-->
<!-- 	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean> -->

  <!-- 接口编程，不需要实现类，目前系统保留配置文件，方便维护，还有一种是把sql语句通过注解写在方法上边 ,在对应的mapper.xml文件中，namespace的路径为具体的Dao类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.rongcapital.wallet.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 拦截器方式配置事物 -->
<!-- 	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="add*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="save*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="modify*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="delete*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="find*" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="query*" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="search*" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="*" propagation="SUPPORTS" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut id="transactionPointcut" -->
<!-- 			expression="execution(* com.rongcapital.wallet..*.*(..))" /> -->
<!-- 		<aop:advisor pointcut-ref="transactionPointcut" -->
<!-- 			advice-ref="transactionAdvice" /> -->
<!-- 	</aop:config> -->
	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.rongcapital.wallet.*</value>
			</list>

		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<aop:aspectj-autoproxy expose-proxy="true"/>



</beans>  